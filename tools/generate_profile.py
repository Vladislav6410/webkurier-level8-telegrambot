import telebot
from telebot import types

# –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
bot = telebot.TeleBot ('7760997174:AAHFS_BpIMekNheOIU82M4WZ7qCxusFj4')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–†—É—Å—Å–∫–∏–π + English)
def create_main_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üß† –†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤ / Test Mode", callback_data='test_mode'),
        types.InlineKeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π / Knowledge Base", callback_data='knowledge_base'),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ / Stats", callback_data='stats'),
        types.InlineKeyboardButton("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ / Scheduler", callback_data='scheduler'),
        types.InlineKeyboardButton("ü§ñ –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ / AI Tech", callback_data='ai_tech'),
        types.InlineKeyboardButton("üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ / Web Dev", callback_data='web_dev'),
        types.InlineKeyboardButton("üîó API –∏ SQL", callback_data='api_sql'),
        types.InlineKeyboardButton("üéÆ –ò–≥—Ä—ã: Solidity/Unity/C++", callback_data='gamedev')
    ]
    keyboard.add(*buttons)
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id,
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WebKurier LEVEL 8!\n"
        "üîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π Telegram-–±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–æ–≤.\n\n"
        "üöÄ Welcome to WebKurier LEVEL 8!\n"
        "üîß Interactive Telegram bot for learning and testing.",
        reply_markup=create_main_keyboard())

# –ö–æ–º–∞–Ω–¥—ã /menu –∏–ª–∏ /help
@bot.message_handler(commands=['menu', 'help'])
def menu_command(message):
    bot.send_message(message.chat.id,
        "üìò –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main Menu:", 
        reply_markup=create_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_buttons(call):
    if call.message:
        if call.data == 'test_mode':
            bot.send_message(call.message.chat.id, 
                "üß† –†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤ / Test Mode\n"
                "–û—Ç–≤–µ—Ç—å –Ω–∞ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è.")

        elif call.data == 'knowledge_base':
            bot.send_message(call.message.chat.id,
                "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π / Knowledge Base –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")

        elif call.data == 'stats':
            bot.send_message(call.message.chat.id,
                "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –æ–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ.\nStats: Learning in progress.")

        elif call.data == 'scheduler':
            bot.send_message(call.message.chat.id,
                "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\nScheduler coming soon.")

        elif call.data == 'ai_tech':
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üß¨ –ù–µ–π—Ä–æ—Å–µ—Ç–∏ / Neural Networks", callback_data='ai_neural'),
                types.InlineKeyboardButton("üìà –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ / Machine Learning", callback_data='ai_ml')
            )
            bot.send_message(call.message.chat.id, "ü§ñ –ò–ò / AI Technologies:", reply_markup=markup)

        elif call.data == 'web_dev':
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üåê HTML5", callback_data='html5'),
                types.InlineKeyboardButton("üé® CSS3", callback_data='css3'),
                types.InlineKeyboardButton("üíª JavaScript", callback_data='js')
            )
            bot.send_message(call.message.chat.id, "üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ / Web Development:", reply_markup=markup)

        elif call.data == 'api_sql':
            bot.send_message(call.message.chat.id,
                "üîó –ü—Ä–∏–º–µ—Ä API / API Example:\nGET /api/v1/users\n\n"
                "üìö SQL –ø—Ä–∏–º–µ—Ä / SQL Example:\nSELECT * FROM users;")

        elif call.data == 'gamedev':
            bot.send_message(call.message.chat.id,
                "üéÆ Solidity –ø—Ä–∏–º–µ—Ä / Example:\n"
                "pragma solidity ^0.8.0;\ncontract Test {\n  uint val;\n}")

        # –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã –ò–ò
        elif call.data == 'ai_neural':
            bot.send_message(call.message.chat.id,
                "üß¨ –ù–µ–π—Ä–æ—Å–µ—Ç–∏ / Neural Networks:\n"
                "–ú–æ–¥–µ–ª–∏, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞ –∏ –æ–±—É—á–∞—é—â–∏–µ—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.")

        elif call.data == 'ai_ml':
            bot.send_message(call.message.chat.id,
                "üìà –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ / Machine Learning:\n"
                "–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.")

        # Web-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        elif call.data == 'html5':
            bot.send_message(call.message.chat.id,
                "<!DOCTYPE html>\n<html><body><h1>–ü—Ä–∏–º–µ—Ä HTML5</h1></body></html>")

        elif call.data == 'css3':
            bot.send_message(call.message.chat.id,
                "body {\n  background-color: #fff;\n  color: #333;\n}")

        elif call.data == 'js':
            bot.send_message(call.message.chat.id,
                "document.getElementById('demo').innerText = 'JavaScript —Ä–∞–±–æ—Ç–∞–µ—Ç!';")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()