// üì¶ dropbox-agent.js ‚Äî –∞–≥–µ–Ω—Ç Dropbox –¥–ª—è WebKurierCore —Å –∫–æ–Ω—Ñ–∏–≥–æ–º

import { Dropbox } from 'https://unpkg.com/dropbox@11.0.4/dist/Dropbox-sdk.min.js';

let config = {
  access_token: '',
  default_path: '/WebKurierCore/memory/',
  default_filename: 'webcoin.txt',
  auto_save_on_exit: true,
  log_enabled: true
};

let dbx = null;

// üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function loadConfig() {
  try {
    const res = await fetch('./engine/dropbox-config.json');
    const data = await res.json();
    config = { ...config, ...data }; // –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–æ–º
    dbx = new Dropbox({ accessToken: config.access_token });
    logToTerminal('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Dropbox –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
  } catch (err) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dropbox-config.json:', err.message);
    logToTerminal('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Dropbox.');
  }
}

// üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
async function save(filename = config.default_filename, content = '') {
  const path = config.default_path + filename;
  try {
    await dbx.filesUpload({ path, contents: content, mode: 'overwrite' });
    if (config.log_enabled) logToTerminal(`üì§ –§–∞–π–ª "${filename}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω.`);
  } catch (err) {
    logToTerminal(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ "${filename}": ${err.message}`);
  }
}

// üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
async function load(filename = config.default_filename) {
  const path = config.default_path + filename;
  try {
    const res = await dbx.filesDownload({ path });
    const blob = res.result.fileBlob;
    const text = await blob.text();
    if (config.log_enabled) logToTerminal(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Dropbox:\n${text}`);
    return text;
  } catch (err) {
    logToTerminal(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ "${filename}": ${err.message}`);
    return null;
  }
}

// üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
async function list() {
  try {
    const res = await dbx.filesListFolder({ path: config.default_path });
    const files = res.result.entries;
    if (!files.length) return logToTerminal('üìÇ –ü–∞–ø–∫–∞ Dropbox –ø—É—Å—Ç–∞.');
    const listText = files.map(f => '‚Ä¢ ' + f.name).join('\n');
    logToTerminal(`üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:\n${listText}`);
    return files;
  } catch (err) {
    logToTerminal(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: ${err.message}`);
    return [];
  }
}

// üñ®Ô∏è –õ–æ–≥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
function logToTerminal(msg) {
  const el = document.getElementById('terminal-output') || document.getElementById('terminal-log');
  if (el) {
    if (el.tagName === 'TEXTAREA') {
      el.value += msg + '\n';
      el.scrollTop = el.scrollHeight;
    } else {
      el.innerHTML += `<div>${msg}</div>`;
      el.scrollTop = el.scrollHeight;
    }
  }
}

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
await loadConfig();

// üß© –≠–∫—Å–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–∞
export const dropboxAgent = { save, load, list };