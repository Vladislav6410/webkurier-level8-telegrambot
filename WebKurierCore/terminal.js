
// === terminal.js ===
// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–º–∞–Ω–¥, Dropbox –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞

// --- –ò–º–ø–æ—Ä—Ç—ã ---
import { dropboxAgent } from './engine/dropbox-agent.js';
import { LegalAgent } from './engine/agents/legal-agent.js';

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
let balance = 0;
const autoLoadHistory = true;

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function printToTerminal(message) {
  const output = document.getElementById('terminal-output');
  output.value += message + '\n';
  output.scrollTop = output.scrollHeight;
}

function resetTerminal() {
  balance = 0;
  printToTerminal('üîÑ –ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω.');
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
async function handleCommand(event) {
  if (event.key === 'Enter') {
    const input = event.target;
    const command = input.value.trim();
    input.value = '';
    if (!command) return;

    printToTerminal('> ' + command);

    switch (true) {
      case command.startsWith('/add '): {
        const parts = command.split(' ');
        const amount = parseFloat(parts[1]);
        if (isNaN(amount)) {
          printToTerminal('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.');
        } else {
          balance += amount;
          printToTerminal(`üí∞ –ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${amount}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance}.`);
        }
        break;
      }

      case command.startsWith('/save'): {
        const parts = command.split(' ');
        const filename = parts[1] || 'webcoin.txt';
        const data = `–ë–∞–ª–∞–Ω—Å: ${balance}`;
        dropboxAgent.save(filename, data)
          .then(() => printToTerminal(`‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª "${filename}".`))
          .catch(err => printToTerminal(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${err.message || err}`));
        break;
      }

      case command.startsWith('/load'): {
        const parts = command.split(' ');
        const loadName = parts[1] || 'webcoin.txt';
        dropboxAgent.load(loadName)
          .then(text => {
            if (text) {
              printToTerminal(`üì• –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ "${loadName}":\n${text}`);
            } else {
              printToTerminal(`‚ùå –§–∞–π–ª "${loadName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
          })
          .catch(err => printToTerminal(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message || err}`));
        break;
      }

      case command === '/list': {
        dropboxAgent.list()
          .then(files => {
            if (!files.length) return printToTerminal('üìÇ –ü–∞–ø–∫–∞ Dropbox –ø—É—Å—Ç–∞.');
            const fileList = files.map(f => '‚Ä¢ ' + (f.name || f)).join('\n');
            printToTerminal(`üìÅ –§–∞–π–ª—ã –≤ Dropbox:\n${fileList}`);
          })
          .catch(err => printToTerminal(`‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞: ${err.message || err}`));
        break;
      }

      case command === '/history': {
        loadCopilotHistory();
        break;
      }

      case command === '/balance': {
        printToTerminal(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance}`);
        break;
      }

      case command === '/reset': {
        resetTerminal();
        break;
      }

      case command === '/ping': {
        printToTerminal('üèì Pong!');
        break;
      }

      case command === 'help': {
        printToTerminal(
`üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add N         ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å—É–º–º—É –∫ –±–∞–ª–∞–Ω—Å—É
/save [–∏–º—è]    ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ —Ñ–∞–π–ª
/load [–∏–º—è]    ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
/list          ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ Dropbox
/history       ‚Äî –∏—Å—Ç–æ—Ä–∏—è Copilot
/balance       ‚Äî —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
/reset         ‚Äî —Å–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
/ping          ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏
/legal         ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–≥–µ–Ω—Ç
help           ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`);
        break;
      }

      case command.startsWith('/legal'): {
        const [, action, ...rest] = command.split(" ");
        if (action === "analyze") {
          const text = rest.join(" ");
          printToTerminal(await LegalAgent.analyze(text));
        } else if (action === "template") {
          printToTerminal(LegalAgent.getTemplate(rest[0]));
        } else {
          printToTerminal(LegalAgent.help());
        }
        break;
      }

      default: {
        printToTerminal('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ help –¥–ª—è —Å–ø–∏—Å–∫–∞.');
        break;
      }
    }
  }
}

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
function loadCopilotHistory() {
  dropboxAgent.load('dropbox-history.json')
    .then(text => {
      if (text) {
        printToTerminal(`üìú –ò—Å—Ç–æ—Ä–∏—è Copilot:\n${text}`);
      } else {
        printToTerminal('‚ùå –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      }
    })
    .catch(err => printToTerminal(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: ${err.message || err}`));
}

// --- –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
document.getElementById('terminal-input').addEventListener('keydown', handleCommand);

const copilotBtn = document.createElement('button');
copilotBtn.textContent = 'üìú –ò—Å—Ç–æ—Ä–∏—è Copilot';
copilotBtn.style.margin = '8px 0';
copilotBtn.onclick = loadCopilotHistory;
document.getElementById('dropbox-controls').appendChild(copilotBtn);

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
if (autoLoadHistory) {
  loadCopilotHistory();
}
printToTerminal('üñ•Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª –≥–æ—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
